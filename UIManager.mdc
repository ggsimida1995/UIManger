---
description: 
globs: 
alwaysApply: false
---
# UIManager 组件库

UIManager是一个用于SwiftUI的轻量级界面组件管理库，集成了弹窗和提示系统，帮助开发者快速构建现代化、美观的用户界面。

## 安装和配置

- 通过SPM引入库：`https://github.com/ggsimida1995/UiManager.git`
- 导入库：`import UIManager`
- 初始化：`UIManager.initialize()`

## 基础配置

### 初始化

在App结构体中初始化UIManager：

```swift
@main
struct MyApp: App {
    var body: some Scene {
        WindowGroup {
            ContentView()
                .withUIComponents() // 同时应用Toast和Popup修饰器
        }
    }
    
    init() {
        UIManager.initialize()
    }
}
```

### 应用UI组件修饰器

为视图添加UI组件支持：

```swift
ContentView()
    .withUIComponents()
```

也可以单独使用某个组件：

```swift
ContentView()
    .withToast() // 仅添加Toast支持
    .withPopups() // 仅添加Popup支持
```

## Toast提示

### 显示普通提示

```swift
self.uiToast("这是一条普通提示信息")
```

### 显示成功提示

```swift
self.uiSuccess("操作成功完成")
```

### 显示错误提示

```swift
self.uiError("发生错误，请重试")
```

## 弹窗组件

### 基础弹窗

最简单的居中弹窗：

```swift
self.uiPopup {
    VStack(spacing: 16) {
        Text("基础弹窗")
            .font(.headline)
        
        Text("这是一个基础弹窗示例，可以显示任意内容。")
            .font(.subheadline)
            .multilineTextAlignment(.center)
        
        Button(action: {
            self.uiCloseAllPopups()
        }) {
            Text("关闭")
                .frame(width: 100, height: 40)
                .background(Color.blue)
                .foregroundColor(.white)
                .cornerRadius(8)
        }
    }
    .padding()
}
```

### 带关闭按钮的弹窗

右上角带有关闭按钮的弹窗：

```swift
self.uiPopup(
    content: {
        VStack(spacing: 16) {
            Text("带关闭按钮的弹窗")
                .font(.headline)
            
            Text("这个弹窗在右上角有一个关闭按钮，点击即可关闭弹窗。")
                .font(.subheadline)
                .multilineTextAlignment(.center)
            
            Text("也可以点击外部区域关闭弹窗。")
                .font(.caption)
        }
        .padding()
    },
    showCloseButton: true,
    closeButtonPosition: .topTrailing
)
```

### 输入弹窗

用于获取用户输入的弹窗：

```swift
self.uiPopup {
    VStack(spacing: 16) {
        Text("请输入内容")
            .font(.headline)
        
        Text("这是一个输入弹窗示例，用于获取用户输入。")
            .font(.subheadline)
            .multilineTextAlignment(.center)
        
        TextField("请输入...", text: $inputText)
            .padding()
            .background(Color(.systemGray6))
            .cornerRadius(8)
        
        HStack {
            Button("取消") {
                self.uiCloseAllPopups()
                self.uiToast("取消输入")
            }
            .frame(height: 40)
            .frame(maxWidth: .infinity)
            .background(Color.gray.opacity(0.2))
            .foregroundColor(.primary)
            .cornerRadius(8)
            
            Button("确定") {
                self.uiCloseAllPopups()
                self.uiSuccess("输入成功")
            }
            .frame(height: 40)
            .frame(maxWidth: .infinity)
            .background(Color.blue)
            .foregroundColor(.white)
            .cornerRadius(8)
        }
    }
    .padding()
}
```

### 提示弹窗

#### 警告弹窗

```swift
self.uiPopup {
    VStack(spacing: 16) {
        Image(systemName: "exclamationmark.triangle.fill")
            .font(.system(size: 40))
            .foregroundColor(.orange)
        
        Text("警告")
            .font(.headline)
        
        Text("这是一个警告弹窗示例，用于提示用户确认重要操作。")
            .font(.subheadline)
            .multilineTextAlignment(.center)
        
        HStack {
            Button("取消") {
                self.uiCloseAllPopups()
                self.uiToast("操作已取消")
            }
            .frame(height: 40)
            .frame(maxWidth: .infinity)
            .background(Color.gray.opacity(0.2))
            .foregroundColor(.primary)
            .cornerRadius(8)
            
            Button("确定") {
                self.uiCloseAllPopups()
                self.uiSuccess("操作已确认")
            }
            .frame(height: 40)
            .frame(maxWidth: .infinity)
            .background(Color.blue)
            .foregroundColor(.white)
            .cornerRadius(8)
        }
    }
    .padding()
}
```

#### 成功弹窗

```swift
self.uiPopup {
    VStack(spacing: 16) {
        Image(systemName: "checkmark.circle.fill")
            .font(.system(size: 40))
            .foregroundColor(.green)
        
        Text("操作成功")
            .font(.headline)
        
        Text("这是一个成功弹窗示例，用于通知用户操作已成功完成。")
            .font(.subheadline)
            .multilineTextAlignment(.center)
        
        Button("确定") {
            self.uiCloseAllPopups()
            self.uiToast("关闭成功弹窗")
        }
        .frame(width: 120, height: 40)
        .background(Color.blue)
        .foregroundColor(.white)
        .cornerRadius(8)
    }
    .padding()
}
```

### 位置弹窗

#### 顶部弹窗

```swift
self.uiPopup(
    content: {
        VStack {
            Text("顶部弹窗")
                .font(.headline)
                .foregroundColor(.white)
            
            Text("这是一个显示在顶部的弹窗")
                .font(.subheadline)
                .foregroundColor(.white)
                .multilineTextAlignment(.center)
            
            Button("关闭") {
                self.uiCloseAllPopups()
            }
            .padding(.vertical, 8)
            .padding(.horizontal, 20)
            .background(Color.white)
            .foregroundColor(.blue)
            .cornerRadius(20)
            .padding(.top, 8)
        }
        .padding()
        .frame(maxWidth: .infinity)
    },
    position: .top,
    size: .fullWidth(nil),
    backgroundColor: .blue,
    cornerRadius: 16,
    showCloseButton: true
)
```

#### 底部弹窗

```swift
self.uiPopup(
    content: {
        VStack(spacing: 12) {
            // 拖动条
            RoundedRectangle(cornerRadius: 2)
                .fill(Color.gray.opacity(0.5))
                .frame(width: 40, height: 4)
                .padding(.top, 8)
                .padding(.bottom, 16)
            
            Text("底部弹窗")
                .font(.headline)
            
            Text("这是一个从底部弹出的视图，常用于展示附加信息或菜单。")
                .font(.body)
                .multilineTextAlignment(.center)
                .padding(.vertical, 8)
            
            Button("关闭") {
                self.uiCloseAllPopups()
            }
            .frame(width: 120, height: 40)
            .background(Color.blue)
            .foregroundColor(.white)
            .cornerRadius(8)
            .padding(.top, 8)
            .padding(.bottom, 16)
        }
        .padding()
    },
    position: .bottom,
    size: .fullWidth(nil),
    backgroundColor: Color(.systemBackground),
    cornerRadius: 16
)
```

#### 右侧弹窗

```swift
self.uiPopup(
    content: {
        VStack(spacing: 16) {
            Text("右侧弹窗")
                .font(.headline)
            
            Text("这是一个从右侧弹出的视图，可用于临时操作区域。")
                .font(.body)
                .multilineTextAlignment(.center)
            
            Button("关闭") {
                self.uiCloseAllPopups()
            }
            .frame(width: 100, height: 40)
            .background(Color.blue)
            .foregroundColor(.white)
            .cornerRadius(8)
            .padding(.top, 16)
        }
        .padding()
        .frame(maxHeight: .infinity)
    },
    position: .right,
    size: .fullHeight(200),
    backgroundColor: Color(.systemBackground),
    cornerRadius: 0,
    showCloseButton: true,
    closeButtonPosition: .topLeading
)
```

#### 左侧弹窗

```swift
self.uiPopup(
    content: {
        VStack(spacing: 16) {
            Text("左侧弹窗")
                .font(.headline)
            
            Text("这是一个从左侧弹出的视图，常用于导航菜单。")
                .font(.body)
                .multilineTextAlignment(.center)
            
            Button("关闭") {
                self.uiCloseAllPopups()
            }
            .frame(width: 100, height: 40)
            .background(Color.blue)
            .foregroundColor(.white)
            .cornerRadius(8)
            .padding(.top, 16)
        }
        .padding()
        .frame(maxHeight: .infinity)
    },
    position: .left,
    size: .fullHeight(200),
    backgroundColor: Color(.systemBackground),
    cornerRadius: 0,
    showCloseButton: true,
    closeButtonPosition: .topTrailing
)
```

### 特殊弹窗

#### 底部菜单（ActionSheet）

```swift
self.uiBottomSheet {
    VStack(spacing: 0) {
        VStack(spacing: 12) {
            Text("选择操作")
                .font(.headline)
            
            Text("请选择以下操作之一")
                .font(.subheadline)
        }
        .frame(maxWidth: .infinity)
        .padding(.vertical, 16)
        
        Divider()
        
        // 选项
        Button {
            self.uiCloseAllPopups()
            self.uiToast("选择了拍照")
        } label: {
            HStack {
                Image(systemName: "camera")
                    .foregroundColor(.blue)
                    .frame(width: 30)
                
                Text("拍照")
                
                Spacer()
            }
            .contentShape(Rectangle())
            .frame(maxWidth: .infinity)
            .padding(.vertical, 14)
            .padding(.horizontal)
        }
        
        Divider()
        
        Button {
            self.uiCloseAllPopups()
            self.uiToast("选择了从相册选择")
        } label: {
            HStack {
                Image(systemName: "photo")
                    .foregroundColor(.blue)
                    .frame(width: 30)
                
                Text("从相册选择")
                
                Spacer()
            }
            .contentShape(Rectangle())
            .frame(maxWidth: .infinity)
            .padding(.vertical, 14)
            .padding(.horizontal)
        }
        
        Divider()
        
        Button {
            self.uiCloseAllPopups()
            self.uiError("选择了删除操作")
        } label: {
            HStack {
                Image(systemName: "trash")
                    .foregroundColor(.red)
                    .frame(width: 30)
                
                Text("删除")
                    .foregroundColor(.red)
                
                Spacer()
            }
            .contentShape(Rectangle())
            .frame(maxWidth: .infinity)
            .padding(.vertical, 14)
            .padding(.horizontal)
        }
        
        Divider()
        
        // 取消按钮
        Button {
            self.uiCloseAllPopups()
        } label: {
            Text("取消")
                .font(.headline)
                .foregroundColor(.blue)
                .frame(maxWidth: .infinity)
                .padding(.vertical, 16)
        }
    }
}
```

#### 侧边栏菜单

```swift
self.uiSidebar {
    VStack(spacing: 0) {
        // 顶部区域
        VStack(spacing: 10) {
            Text("菜单")
                .font(.title2)
                .fontWeight(.bold)
                .frame(maxWidth: .infinity, alignment: .leading)
        }
        .padding(.top, 20)
        .padding(.horizontal, 20)
        .padding(.bottom, 20)
        
        Divider()
        
        // 菜单项
        Button(action: {
            self.uiCloseAllPopups()
            self.uiToast("选择了: 首页")
        }) {
            HStack(spacing: 12) {
                Image(systemName: "house")
                    .font(.system(size: 18))
                    .frame(width: 24)
                
                Text("首页")
                    .font(.body)
                
                Spacer()
                
                Image(systemName: "checkmark")
                    .font(.system(size: 14))
                    .foregroundColor(.blue)
            }
            .contentShape(Rectangle())
            .padding(.horizontal, 20)
            .padding(.vertical, 12)
            .background(Color.blue.opacity(0.1))
            .foregroundColor(.blue)
        }
        
        Button(action: {
            self.uiCloseAllPopups()
            self.uiToast("选择了: 收藏")
        }) {
            HStack(spacing: 12) {
                Image(systemName: "star")
                    .font(.system(size: 18))
                    .frame(width: 24)
                
                Text("收藏")
                    .font(.body)
                
                Spacer()
            }
            .contentShape(Rectangle())
            .padding(.horizontal, 20)
            .padding(.vertical, 12)
        }
        
        Spacer()
        
        Divider()
        
        // 底部关闭按钮
        Button {
            self.uiCloseAllPopups()
        } label: {
            HStack {
                Image(systemName: "xmark.circle.fill")
                Text("关闭菜单")
            }
            .padding()
            .frame(maxWidth: .infinity)
            .foregroundColor(.blue)
        }
    }
    .frame(maxHeight: .infinity)
}
```

#### 自定义尺寸弹窗

```swift
self.uiPopup(
    content: {
        VStack {
            Text("自定义尺寸弹窗")
                .font(.headline)
            
            Text("这个弹窗使用了自定义尺寸")
                .font(.subheadline)
            
            Button("关闭") {
                self.uiCloseAllPopups()
            }
            .padding(8)
            .background(Color.blue)
            .foregroundColor(.white)
            .cornerRadius(8)
            .padding(.top, 8)
        }
        .padding()
    },
    size: .fixed(CGSize(width: 200, height: 160)),
    backgroundColor: Color(.systemBackground),
    showCloseButton: true
)
```

#### 无背景弹窗

用于显示简单的状态图标：

```swift
self.uiPopup(
    content: {
        Image(systemName: "checkmark.circle.fill")
            .font(.system(size: 80))
            .foregroundColor(.green)
            .padding()
            .background(Color.white.opacity(0.9))
            .cornerRadius(40)
            .shadow(radius: 10)
    },
    closeOnTapOutside: true,
    onClose: {
        // 在关闭后执行操作
    }
)
```

## 其他操作

### 关闭所有弹窗

```swift
self.uiCloseAllPopups()
```

### 清理所有UI组件

```swift
UIManager.clearAll() // 同时关闭所有弹窗和Toast
```

## 完整应用示例

创建一个包含多种UI组件的应用：

```swift
import SwiftUI
import UIManager

@main
struct MyApp: App {
    @StateObject private var themeManager = ThemeViewModel()
    
    var body: some Scene {
        WindowGroup {
            ContentView()
                .environmentObject(themeManager)
                .accentColor(themeManager.themeColor)
                .withUIComponents()
        }
    }
    
    init() {
        UIManager.initialize()
    }
}

class ThemeViewModel: ObservableObject {
    @Published var isDarkMode: Bool = false
    
    var themeColor: Color {
        Color.blue
    }
    
    var backgroundColor: Color {
        isDarkMode ? Color.black : Color(UIColor.systemGray6)
    }
}

struct ContentView: View {
    @EnvironmentObject private var themeManager: ThemeViewModel
    @State private var inputValue = ""
    
    var body: some View {
        NavigationView {
            ScrollView {
                VStack(spacing: 20) {
                    Group {
                        demoButton(title: "显示Toast", action: showToast)
                        demoButton(title: "显示弹窗", action: showPopup)
                        demoButton(title: "显示底部菜单", action: showBottomSheet)
                        demoButton(title: "显示侧边栏", action: showSidebar)
                    }
                }
                .padding()
            }
            .navigationTitle("UIManager 示例")
        }
    }
    
    private func demoButton(title: String, action: @escaping () -> Void) -> some View {
        Button(action: action) {
            Text(title)
                .font(.headline)
                .foregroundColor(.white)
                .frame(maxWidth: .infinity)
                .frame(height: 44)
                .background(themeManager.themeColor)
                .cornerRadius(10)
        }
    }
    
    private func showToast() {
        self.uiToast("这是一条提示信息")
    }
    
    private func showPopup() {
        self.uiPopup {
            VStack {
                Text("弹窗标题")
                    .font(.headline)
                
                Text("弹窗内容")
                    .padding()
                
                Button("关闭") {
                    self.uiCloseAllPopups()
                }
                .buttonStyle(.borderedProminent)
            }
            .padding()
        }
    }
    
    private func showBottomSheet() {
        self.uiBottomSheet {
            // 底部菜单内容
            Text("底部菜单内容")
        }
    }
    
    private func showSidebar() {
        self.uiSidebar {
            // 侧边栏内容
            Text("侧边栏内容")
        }
    }
}
```